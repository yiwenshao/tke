/*
 * Tencent is pleased to support the open source community by making TKEStack
 * available.
 *
 * Copyright (C) 2012-2019 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package tkestack.io.tke.api.logagent.v1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1";

// LogAgent is a manager to collect logs of workload.
message LogAgent {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of LogCollector.
  // +optional
  optional LogAgentSpec spec = 2;

  // +optional
  optional LogAgentStatus status = 3;
}

// LogAgentList is the whole list of all LogCollector which owned by a tenant.
message LogAgentList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of volume decorators.
  repeated LogAgent items = 2;
}

// LogCollectorSpec describes the attributes of a LogCollector.
message LogAgentSpec {
  optional string tenantID = 1;

  optional string clusterName = 2;

  optional string version = 3;
}

// LogCollectorStatus is information about the current status of a LogCollector.
message LogAgentStatus {
  // +optional
  optional string version = 1;

  // Phase is the current lifecycle phase of the LogCollector of cluster.
  // +optional
  optional string phase = 2;

  // Reason is a brief CamelCase string that describes any failure.
  // +optional
  optional string reason = 3;

  // RetryCount is a int between 0 and 5 that describes the time of retrying initializing.
  // +optional
  optional int32 retryCount = 4;

  // LastReInitializingTimestamp is a timestamp that describes the last time of retrying initializing.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastReInitializingTimestamp = 5;
}

// LogFileTree
message LogFileTree {
  optional string clusterId = 1;

  optional string namespace = 2;

  optional string name = 3;

  optional string container = 4;

  optional string pod = 5;
}

